import scipy
import numpy as np
import statistics
from typing import List

import scipy.optimize
data = scipy.stats.norm.cdf(np.linspace(0,1,101)) - 0.5

import scipy.linalg
from scipy.stats import chi2


from math import sqrt, fabs


d = {}
n = 0
for i in data:
    d[n] = round(float(i), 4)
    n = round(n+0.01, 3)
    
    
def F(x):
    print(x)
    return d[x]




def my_mean(data_x, data_p):
    data = []
    for i in range(len(data_x)):
        data += data_p[i] * [data_x[i]]
    return statistics.mean(data)


def my_variance(data_x, data_p):
    data = []
    for i in range(len(data_x)):
        data += data_p[i] * [data_x[i]]
    return statistics.variance(data)




def chi_critical(k: int = 5,  alpha : float = 0.01):
    
    alpha_levels = [0.99, 0.95, 0.5, 0.1, 0.05, 0.025, 0.01]

    # Задаем максимальное количество степеней свободы
    max_df = max(20, k+7)

    # Создаем словарь для хранения критических точек
    critical_values = {}

    # Вычисляем критические точки
    for df in range(1, max_df + 1):
        critical_values[df] = {alpha: chi2.ppf(1 - alpha, df) for alpha in alpha_levels}
        
    return critical_values[k][alpha]


def chi_obvervable(data_p, data_x):
    
    observed = np.array([data_p, data_x])
    
    row_sums = observed.sum(axis=1)
    col_sums = observed.sum(axis=0)
    total = observed.sum()
    
    expected = np.outer(row_sums, col_sums) / total
    
    chi2_stat = ((observed - expected) ** 2 / expected).sum()
    
    degrees_of_freedom = (observed.shape[0] - 1) * (observed.shape[1] - 1)
    
    p_value = chi2.cdf(chi2_stat, degrees_of_freedom)
    
    return chi2_stat, p_value, degrees_of_freedom


def critical_pearson_correlation(level_of_significance, n):
    """Вычисление критического значения коэффициента корреляции Пирсона."""
    df = n - 2
    t_critical = scipy.stats.t.ppf(1 - level_of_significance / 2, df)
    r_critical = t_critical / np.sqrt(t_critical**2 + df)
    return r_critical

def search_crit_pearson(alpha: float, k: int) -> float:
    levels_of_significance = [0.1, 0.05, 0.01]

    sample_sizes = range(5, 31)


    data = {}
    for level in levels_of_significance:
        critical_values = []
        for n in sample_sizes:
            r_critical = critical_pearson_correlation(level, n)
            critical_values.append(round(float(r_critical), 3))
            #print(critical_values)
        data[f'{level}'] = critical_values
    return data[str(alpha)][k-5]



def regression_equationYX(X: List, Y: List) -> str:
    n = len(X)
    Xsum: float = sum(X)
    Ysum: float = sum(Y)
    XY: List[float] = list(map(lambda x, y: x*y, X, Y))
    XYsum: float = sum(XY)
    Xsqr: List[float] = list(map(lambda x: x**2, X))
    Xsqrsum: float = sum(Xsqr)
    Ysqr: List[float] = list(map(lambda y: y**2, Y))
    Ysqrsum: float = sum(Ysqr)

    # print(f"X: {list(map(lambda x: round(x, 3), X))}\nsum X = {Xsum}")
    # print(f"Y: {list(map(lambda y: round(y, 3), Y))}\nsum Y = {Ysum}")
    # print(f"X*Y: {list(map(lambda xy: round(xy, 3), XY))}\nsum X*Y = {XYsum}")
    # print(f"X^2: {list(map(lambda xx: round(xx, 3), Xsqr))}\nsum X^2 = {Xsqr}")
    # print(f"Y^2: {list(map(lambda yy: round(yy, 3), Ysqr))}\nsum Y^2 = {Ysqr}")
    
    sys_equations_A = [[Xsqrsum, Xsum], [Xsum, n]]
    sys_equations_B = [XYsum, Ysum]
    a, b = list(map(lambda x: x, scipy.linalg.solve(sys_equations_A, sys_equations_B)))
    # print(f'Система: a*{sys_equations_A[0][0]:.3f} + b*{sys_equations_A[0][1]:.3f} = {sys_equations_B[0]:.3f}')
    # print(f'Система: a*{sys_equations_A[1][0]:.3f} + b*{sys_equations_A[1][1]:.3f} = {sys_equations_B[1]:.3f}')
    print(f"Корни системы: a = {a:.6f}, b = {b:.6f}")
    return (a, b)
    

def coeff_correlation(X: List[float], Y: List[float]) -> float:
    n: int = len(X)
    xy_ = sum(map(lambda x, y: x*y, X, Y)) / n
    x_ = sum(X) / n
    y_ = sum(Y) / n
    
    sigmaX = sqrt(sum(list(map(lambda x: x*x, X)))/n - x_**2)
    sigmaY = sqrt(sum(list(map(lambda y: y*y, Y)))/n - y_**2)
    
    print(sigmaX, sigmaY)
    coeff = (xy_ - x_ * y_) / (sigmaX * sigmaY)
    print(coeff)
    print(coeff * sigmaX / sigmaY)
    return coeff



def main():
    # coeff_correlation(# for test
        # [12, 9, 8, 14, 15, 11, 10, 15],
        # [42, 107, 100, 60, 78, 79, 90, 54]
    # ) 
    X = [90.20, 113.0, 100.2, 103.2, 95.15, 108.9, 90.42, 99.51, 89.39, 
              92.10, 92.62, 102.0, 87.23, 93.59, 94.61, 92.57, 101.7, 
              104.4, 102.4, 97.14]
    Y = [93.14, 94.78, 107.9, 101.6, 104.4, 98.65, 95.37, 97.28, 
              86.80, 90.39, 86.52, 99.84, 93.84, 107.8, 89.01, 98.11, 
                100.3, 90.68, 96.36, 111.9]
    coeff_correlation(X, Y)




data = {0.00:	0.0000,	0.48:	0.1844, 0.96:	0.3315,	1.44:	0.4251, 1.92:	0.4726,
0.01:	0.0040,	0.49:	0.1879, 0.97:	0.3340,	1.45:	0.4265, 1.93:	0.4732,
0.02:	0.0080,	0.50:	0.1915, 0.98:	0.3365,	1.46:	0.4279, 1.94:	0.4738,
0.03:	0.0120,	0.51:	0.1950, 0.99:	0.3389,	1.47:	0.4292, 1.95:	0.4744,
0.04:	0.0160,	0.52:	0.1985, 1.00:	0.3413,	1.48:	0.4306, 1.96:	0.4750,
0.05:	0.0199,	0.53:	0.2019, 1.01:	0.3438,	1.49:	0.4319, 1.97:	0.4756,
0.06:	0.0239,	0.54:	0.2054, 1.02:	0.3461,	1.50:	0.4332, 1.98:	0.4761,
0.07:	0.0279,	0.55:	0.2088, 1.03:	0.3485,	1.51:	0.4345, 1.99:	0.4767,
0.08:	0.0319,	0.56:	0.2123, 1.04:	0.3508,	1.52:	0.4357, 2.00:	0.4772,
0.09:	0.0359,	0.57:	0.2157, 1.05:	0.3531,	1.53:	0.4370, 2.02:	0.4783,
0.10:	0.0398,	0.58:	0.2190, 1.06:	0.3554,	1.54:	0.4382, 2.04:	0.4793,
0.11:	0.0438,	0.59:	0.2224, 1.07:	0.3577,	1.55:	0.4394, 2.06:	0.4803,
0.12:	0.0478,	0.60:	0.2257, 1.08:	0.3599,	1.56:	0.4406, 2.08:	0.4812,
0.13:	0.0517,	0.61:	0.2291, 1.09:	0.3621,	1.57:	0.4418, 2.10:	0.4821,
0.14:	0.0557,	0.62:	0.2324, 1.10:	0.3643,	1.58:	0.4429, 2.12:	0.4830,
0.15:	0.0596,	0.63:	0.2357, 1.11:	0.3665,	1.59:	0.4441, 2.14:	0.4838,
0.16:	0.0636,	0.64:	0.2389, 1.12:	0.3686,	1.60:	0.4452, 2.16:	0.4846,
0.17:	0.0675,	0.65:	0.2422, 1.13:	0.3708,	1.61:	0.4463, 2.18:	0.4854,
0.18:	0.0714,	0.66:	0.2454, 1.14:	0.3729,	1.62:	0.4474, 2.20:	0.4861,
0.19:	0.0753,	0.67:	0.2486, 1.15:	0.3749,	1.63:	0.4484, 2.22:	0.4868,
0.20:	0.0793,	0.68:	0.2517, 1.16:	0.3770,	1.64:	0.4495, 2.24:	0.4875,
0.21:	0.0832,	0.69:	0.2549, 1.17:	0.3790,	1.65:	0.4505, 2.26:	0.4881,
0.22:	0.0871,	0.70:	0.2580, 1.18:	0.3810,	1.66:	0.4515, 2.28:	0.4887,
0.23:	0.0910,	0.71:	0.2611, 1.19:	0.3830,	1.67:	0.4525, 2.30:	0.4893,
0.24:	0.0948,	0.72:	0.2642, 1.20:	0.3849,	1.68:	0.4535, 2.32:	0.4898,
0.25:	0.0987,	0.73:	0.2673, 1.21:	0.3869,	1.69:	0.4545, 2.34:	0.4904,
0.26:	0.1026,	0.74:	0.2703, 1.22:	0.3883,	1.70:	0.4554, 2.36:	0.4909,
0.27:	0.1064,	0.75:	0.2734, 1.23:	0.3907,	1.71:	0.4564, 2.38:	0.4913,
0.28:	0.1103,	0.76:	0.2764, 1.24:	0.3925,	1.72:	0.4573, 2.40:	0.4918,
0.29:	0.1141,	0.77:	0.2794, 1.25:	0.3944,	1.73:	0.4582, 2.42:	0.4922,
0.30:	0.1179,	0.78:	0.2823, 1.26:	0.3962,	1.74:	0.4591, 2.44:	0.4927,
0.31:	0.1217,	0.79:	0.2852, 1.27:	0.3980,	1.75:	0.4599, 2.46:	0.4931,
0.32:	0.1255,	0.80:	0.2881, 1.28:	0.3997,	1.76:	0.4608, 2.48:	0.4934,
0.33:	0.1293,	0.81:	0.2910, 1.29:	0.4015,	1.77:	0.4616, 2.50:	0.4938,
0.34:	0.1331,	0.82:	0.2939, 1.30:	0.4032,	1.78:	0.4625, 2.52:	0.4941,
0.35:	0.1368,	0.83:	0.2967, 1.31:	0.4049,	1.79:	0.4633, 2.54:	0.4945,
0.36:	0.1406,	0.84:	0.2995, 1.32:	0.4066,	1.80:	0.4641, 2.56:	0.4948,
0.37:	0.1443,	0.85:	0.3023, 1.33:	0.4082,	1.81:	0.4649, 2.58:	0.4951,
0.38:	0.1480,	0.86:	0.3051, 1.34:	0.4099,	1.82:	0.4656, 2.60:	0.4953,
0.39:	0.1517,	0.87:	0.3078, 1.35:	0.4115,	1.83:	0.4664, 2.62:	0.4956,
0.40:	0.1554,	0.88:	0.3106, 1.36:	0.4131,	1.84:	0.4671, 2.64:	0.4959,
0.41:	0.1591,	0.89:	0.3133, 1.37:	0.4147,	1.85:	0.4678, 2.66:	0.4961,
0.42:	0.1628,	0.90:	0.3159, 1.38:	0.4162,	1.86:	0.4686, 2.68:	0.4963,
0.43:	0.1664,	0.91:	0.3186, 1.39:	0.4177,	1.87:	0.4693, 2.70:	0.4965,
0.44:	0.1700,	0.92:	0.3212, 1.40:	0.4192,	1.88:	0.4699, 2.72:	0.4967,
0.45:	0.1736,	0.93:	0.3238, 1.41:	0.4207,	1.89:	0.4706, 2.74:	0.4969,
0.46:	0.1772,	0.94:	0.3264, 1.42:	0.4222,	1.90:	0.4713, 2.76:	0.4971,
0.47:	0.1808,	0.95:	0.3289, 1.43:	0.4236,	1.91:	0.4719, 2.78:	0.4973,
2.80:	0.4974,
2.82:	0.4976,
2.84:	0.4977,
2.86:	0.4979,
2.88:	0.4980,
2.90:	0.4981,
2.92:	0.4982,
2.94:	0.4984,
2.96:	0.4985,
2.98:	0.4986,
3.00:	0.49865,
3.20:	0.49931,
3.40:	0.49966,
3.60:	0.499841,
3.80:	0.499928,
4.00:	0.499968,
4.50:	0.499997,
5.00:	0.499997}


def GetParm(y):
    for key,val in data.items():
        if(val == y):
            return key
    return -1

def GetVal(x):
    return data[x]


data_01= [[ 4052,	4999,   5403,	5625	,5764,	5889,	5928,	5981,	6022,	6056,	6082,	6106],
            [98.49,	99.01,	90.17,	99.25,   99.33,   99.30,   99.34,   99.36,   99.36,   99.40,   99.41,   99.42],
            [34.12,	30.81,	29.46,	28.71,   28.24,   27.91 ,  27.67,   27.49,   27.34,   27.23,   27.13,   27.05],
            [21.20,	18.00,	16.69,	15.98,   15.52,   15.21,   14.98,   14.80,   14.66,   14.54,   14.45,   14.37],
            [16.26,	13.27,	12.06,	11.39,   10.97,   10.67,   10.45,   10.27,   10.15,   10.05,   9.96,    9.89],
            [13.74,	10.92,	9.78,	9.15 ,   8.75 ,   8.47,    8.26,    8.10,    7.98,    7.87,    7.79,    7.72],
            [12.25,	9.55,   8.45,	7.85 ,   7.46 ,   7.19,    7.00,    6.84,    6.71,    6.62,    6.54,    6.47],
            [11.26,	8.65,   7.59,	7.01 ,   6.63 ,   6.37,    6.19,    6.03,    5.91,    5.82,    5.74,    5.67],
            [10.56,	8.02,   6.99,	6.42	,6.06,	5.80,	5.62,	5.47,	5.35,	5.26,	5.18,	5.11],
            [10.04,	7.56,   6.55,	5.99	,5.64,	5.39,	5.21,	5.06,	4.95,	4.85,	4.78,	4.71],
            [9.86,	7.20,   6.22,	5.67	,5.32,	5.07,	4.88,	4.74,	4.63,	4.54,	4.46,	4.40],
            [9.33,	6.93,   5.95,	5.41	,5.06,	4.82,	4.65,	4.50,	4.39,	4.30,	4.22,	4.16],
            [9.07,	6.70,   5.74,	5.20	,4.86,	4.62,	4.44,	4.30,	4.19,	4.10,	4.02,	3.96],
            [8.86,	6.51,   5.56,	5.03	,4.69,	4.46,	4.28,	4.14,	4.03,	3.94,	3.86,	3.80],
            [8.68,	6.36,   5.42,	4.89	,4.56,	4.32,	4.14,	4.00,	3.89,	3.80,	3.73,	3.67],
            [8.53,	6.23,   5.29,	4.77	,4.44,	4.20,	4.03,	3.89,	3.78,	3.69,	3.61,	3.55],
            [8.40,	6.11,   5.18,	4.67	,4.34,	4.10,	3.93,	3.79,	3.68,	3.59,	3.52,	3.45]]

data_05=[[161,200, 216,	225,230	, 234,237,	    239,	    241,	    242,	    243,	    244],
[18.5,	19.00,	19.16,	19.25,	19.30,	19.33,	19.36,	19.37,	19.38,	19.39,	19.40,	19.41],
[10.13,	9.55,	9.28,	9.12,	9.01,	8.94,	8.88,	8.84,	8.81,	8.78,	8.76,	8.74],
[7.71,	6.94,	6.59,	6.39,	6.26,	6.16,	6.09,	6.04,	6.00,	5.96,	5.93,	5.91],
[6.61,	5.79,	5.41,	5.19,	5.05,	4.95,	4.88,	4.82,	4.78,	4.74,	4.70,	4.68],
[5.99,	5.14,	4.76,	4.53,	4.39,	4.28,	4.21,	4.15,	4.10,	4.06,	4.03,	4.00],
[5.59,	4.74,	4.35,	4.12,	3.97,	3.87,	3.79,	3.73,	3.68,	3.63,	3.60,	3.57],
[5.32,	4.46,	4.07,	3.84,	3.69,	3.58,	3.50,	3.44,	3.39,	3.34,	3.31,	3.28],
[5.12,	4.26,	3.86,	3.63,	3.48,	3.37,	3.29,	3.23,	3.18,	3.13,	3.10,	3.07],
[4.96,	4.10,	3.71,	3.48,	3.33,	3.22,	3.14,	3.07,	3.02,	2.97,	2.94,	2.91],
[4.84,	3.98,	3.59,	3.36,	3.20,	3.09,	3.01,	2.95,	2.90,	2.86,	2.82,	2.79],
[4.75,	3.88,	3.49,	3.26,	3.11,	3.00,	2.92,	2.85,	2.80,	2.76,	2.72,	2.69],
[4.67,	3.80,	3.41,	3.18,	3.02,	2.92,	2.84,	2.77,	2.72,	2.67,	2.63,	2.60],
[4.60,	3.74,	3.34,	3.11,	2.96,	2.85,	2.77,	2.70,	2.65,	2.60,	2.56,	2.53],
[4.54,	3.68,	3.29,	3.06,	2.90,	2.79,	2.70,	2.64,	2.59,	2.55,	2.51,	2.48],
[4.49,	3.63,	3.24,	3.01,	2.85,	2.74,	2.66,	2.59,	2.54,	2.49,	2.45,	2.42],
[4.45,	3.59,	3.20,	2.96,	2.81,	2.70,	2.62,	2.55,	2.50,	2.45,	2.41,	2.38]]

def GetCrit(alpha,x,y):
    if(alpha == 0.01 and x <= 12 and y <= 17):
        return data_01[x][y]
    if(alpha == 0.05 and x <= 12 and y <= 17):
        return data_05[x][y]
    return -1




if __name__ == '__main__':
    main()